/*
-------------------------------------------------------------------------------------------------
QUESTION: how do I integrate the flask backend to this file HomeScreen.tsx 
-------------------------------------------------------------------------------------------------
COPILT RESPONSE:

To integrate a Flask backend with your React Native frontend, you need to follow these steps:

Set up the Flask backend:

Create a Flask application that serves your data.
Ensure your Flask app is running and accessible.
Fetch data from the Flask backend in your React Native app:

Use fetch or a library like axios to make HTTP requests to your Flask backend.
Update your component to fetch data from the backend and render it.
Here's a step-by-step plan:

Flask Backend (Assuming you have a Flask app running)
Create an endpoint in your Flask app to serve the workouts data:

from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/api/workouts', methods=['GET'])
def get_workouts():
    workouts = [
        {'id': 1, 'title': 'Workout 1'},
        {'id': 2, 'title': 'Workout 2'},
        {'id': 3, 'title': 'Workout 3'},
        {'id': 4, 'title': 'Workout 4'},
    ]
    return jsonify(workouts)

if __name__ == '__main__':
    app.run(debug=True)

React Native Frontend
Update your HomeScreen component to fetch data from the Flask backend:

import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, FlatList } from 'react-native';

const HomeScreen = () => {
  const [workouts, setWorkouts] = useState<{ id: number; title: string }[]>([]);

  useEffect(() => {
    const fetchWorkouts = async () => {
      try {
        const response = await fetch('http://<your-flask-backend-url>/api/workouts');
        const data = await response.json();
        setWorkouts(data);
      } catch (error) {
        console.error('Error fetching workouts:', error);
      }
    };

    fetchWorkouts();
  }, []);

  const renderItem = ({ item }: { item: { id: number; title: string } }) => (
    <View style={styles.card}>
      <Text style={styles.cardText}>{item.title}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <FlatList
        data={workouts}
        renderItem={renderItem}
        keyExtractor={(item) => item.id.toString()}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  card: {
    padding: 20,
    marginVertical: 10,
    backgroundColor: '#f9f9f9',
    borderRadius: 5,
  },
  cardText: {
    fontSize: 18,
  },
});

export default HomeScreen;

Notes:
Replace http://<your-flask-backend-url> with the actual URL where your Flask backend is running.
Ensure your Flask backend has CORS enabled if your React Native app is running on a different domain or port.
This setup will allow your React Native app to fetch data from the Flask backend and display it in the HomeScreen component.

*////////////////////////////////////////////////////////////////////////////////////////////////
/*
----------------------------------------------------------------------------------------------------
QUESTION: I need a close button on the DrawerContent to close it after it has been opened _layout.tsx
----------------------------------------------------------------------------------------------------
COPILT: 
To add a close button to the DrawerContent component, you can use the DrawerActions from 
@react-navigation/native to dispatch a close action. Here's how you can modify your 
DrawerContent component to include a close button:

import * as React from 'react';
import { useClientOnlyValue } from '@/components/useClientOnlyValue';
import { createDrawerNavigator, DrawerToggleButton, DrawerActions } from '@react-navigation/drawer';
import { View, StyleSheet, Text, GestureResponderEvent, TouchableOpacity } from 'react-native';
import HomeScreen from './HomeScreen'; 
import SettingsScreen from './SettingsScreen'; 
import AccountProfileScreen from './AccountProfileScreen';
import LoginScreen from './loginScreen';
import PrivacyPolicy from './PrivacyPolicy';
import { useFonts } from 'expo-font';
import { FontAwesome } from '@expo/vector-icons'; 
import { useColorScheme } from '@/components/useColorScheme';
import { LinearGradient } from 'expo-linear-gradient';
import { useNavigation } from '@react-navigation/native';

// You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/
function TabBarIcon(props: {
  name: React.ComponentProps<typeof FontAwesome>['name'];
  color: string;
}) {
  return <FontAwesome size={28} style={{ marginBottom: -3 }} {...props} />;
}

const Drawer = createDrawerNavigator();

function DrawerContent(props: any) {
  const navigation = useNavigation();

  function onPress(event: GestureResponderEvent): void {
    throw new Error('Function not implemented.');
  }

  // Load custom fonts
  const [fontsLoaded] = useFonts({
    'Alkatra': require('../../assets/fonts/Alkatra-VariableFont_wght.ttf'), 
    'AguafinaScript-Regular': require('../../assets/fonts/AguafinaScript-Regular.ttf'),
  });

  if (!fontsLoaded) {
    return <Text>Loading...</Text>;
  }

  return (
    <View style={styles.drawerContent}>
      <TouchableOpacity onPress={() => navigation.dispatch(DrawerActions.closeDrawer())}>
        <Text style={styles.closeButton}>Close</Text>
      </TouchableOpacity>
      {/* Add other drawer items here */}
    </View>
  );
}

export default function App() {
  return (
    <Drawer.Navigator
      drawerContent={(props) => <DrawerContent {...props} />}
      screenOptions={{
        headerStyle: {
          backgroundColor: '#f4511e',
          borderBottomWidth: 0, // Remove bottom border
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
        contentStyle: {
          padding: 0, // Remove padding
          margin: 0, // Remove margin
        },
      }}
    >
      <Drawer.Screen name="Home" component={HomeScreen} />
      <Drawer.Screen name="Settings" component={SettingsScreen} />
      <Drawer.Screen name="Account" component={AccountProfileScreen} />
      <Drawer.Screen name="Login" component={LoginScreen} />
      <Drawer.Screen name="Privacy" component={PrivacyPolicy} />
    </Drawer.Navigator>
  );
}

const styles = StyleSheet.create({
  drawerContent: {
    flex: 1,
    padding: 20,
  },
  closeButton: {
    fontSize: 18,
    color: 'blue',
    marginBottom: 20,
  },
  container: {
    flex: 1,
    padding: 0,
    margin: 0,
  },
});

Key Changes:
Import useNavigation and DrawerActions:

These are used to navigate and dispatch actions within the drawer.
Add Close Button:

Added a TouchableOpacity with a Text component styled as a close button.
The onPress event dispatches the DrawerActions.closeDrawer() action to close the drawer.
Styles:

Added styles for the drawer content and close button.
This will add a close button to your drawer that will close it when pressed.

--------------------------------------------------------------------------------------------------------
QUESTION: I want it to be an icon and in the top right corner
---------------------------------------------------------------------------------------------------------------
COPILT: 
To change the close button to an icon and position it in the top right corner, you can use the FontAwesome icon library and adjust the styles accordingly. Here's how you can modify the provided code:

import { FontAwesome } from '@expo/vector-icons';

// ...

<View style={styles.container}>
  <TouchableOpacity style={styles.closeIcon} onPress={() => navigation.dispatch(DrawerActions.closeDrawer())}>
    <FontAwesome name="close" size={24} color="black" />
  </TouchableOpacity>
  <View style={styles.navigationButtonContainer}>
    <Text style={styles.headerTitle}>Ignite</Text>
    <LinearGradient colors={['#F83600', '#FE8C00']} style={styles.gradient}>
      <TouchableOpacity style={styles.navigationButton} onPress={() => props.navigation.navigate('Home')}>
        <Text style={styles.buttonText}>Home</Text>
      </TouchableOpacity>
    </LinearGradient>
    <LinearGradient colors={['#F83600', '#FE8C00']} style={styles.gradient}>
      <TouchableOpacity style={styles.navigationButton} onPress={() => props.navigation.navigate('LoginScreen')}>
        <Text style={styles.buttonText}>Login</Text>
      </TouchableOpacity>
    </LinearGradient>
    <LinearGradient colors={['#F83600', '#FE8C00']} style={styles.gradient}>
      <TouchableOpacity style={styles.navigationButton} onPress={() => props.navigation.navigate('AccountProfileScreen')}>
        <Text style={styles.buttonText}>Account Profile</Text>
      </TouchableOpacity>
    </LinearGradient>
  </View>
</View>

// Add the following styles to your StyleSheet
const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 0,
    margin: 0,
  },
  closeIcon: {
    position: 'absolute',
    top: 10,
    right: 10,
    zIndex: 1,
  },
  navigationButtonContainer: {
    // Your existing styles
  },
  headerTitle: {
    // Your existing styles
  },
  gradient: {
    // Your existing styles
  },
  navigationButton: {
    // Your existing styles
  },
  buttonText: {
    // Your existing styles
  },
});

Key Changes:
Import FontAwesome:

Ensure you have FontAwesome imported from @expo/vector-icons.
Replace Close Button with Icon:

Use the FontAwesome icon with the name "close".
Position the Icon:

Use absolute positioning to place the icon in the top right corner.
Add Styles:

Added closeIcon style to position the icon correctly.
This will replace the text-based close button with an icon and position it in the top right corner of the drawer.

*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------------------------------------------------------------------------------------------------------
QUESTION: I need to change the color of the text entry boxes for username and password. I want them to be a linear gradient with these colors: '#F83600', '#FE8C00'
------------------------------------------------------------------------------------------------------------------
COPILOT: 
To apply a linear gradient to the text entry boxes for username and password, you can use the LinearGradient component from expo-linear-gradient. Here's how you can do it:

Install expo-linear-gradient if you haven't already:

expo install expo-linear-gradient

Wrap the TextInput components with LinearGradient and apply the gradient colors.

Here's an example of how you can achieve this:

import React from 'react';
import { View, TextInput, StyleSheet } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

export default function LoginScreen() {
  return (
    <View style={styles.container}>
      <LinearGradient colors={['#F83600', '#FE8C00']} style={styles.gradient}>
        <TextInput
          style={styles.input}
          placeholder="Username"
          placeholderTextColor="#fff"
        />
      </LinearGradient>
      <LinearGradient colors={['#F83600', '#FE8C00']} style={styles.gradient}>
        <TextInput
          style={styles.input}
          placeholder="Password"
          placeholderTextColor="#fff"
          secureTextEntry
        />
      </LinearGradient>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  gradient: {
    width: '100%',
    borderRadius: 5,
    marginBottom: 15,
  },
  input: {
    height: 50,
    paddingHorizontal: 10,
    color: '#fff',
    fontSize: 16,
    borderRadius: 5,
  },
});

Explanation:
Install expo-linear-gradient:

Ensure you have the expo-linear-gradient package installed.
Wrap TextInput with LinearGradient:

Use the LinearGradient component to wrap each TextInput.
Apply the gradient colors ['#F83600', '#FE8C00'].
Style Adjustments:

Adjust the styles to ensure the gradient and text input look good together.
Set the placeholderTextColor to ensure the placeholder text is visible.
This will create a linear gradient background for the username and password text entry boxes.

--------------------------------------------------------------------------------------------------------------------
